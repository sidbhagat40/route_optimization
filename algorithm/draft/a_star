#include <bits/stdc++.h>
#include <chrono>
#include <thread>

// Define a structure to represent a geo-coordinate (latitude, longitude)
struct GeoCoordinate {
    double latitude;
    double longitude;

    // Default constructor
    GeoCoordinate() : latitude(0.0), longitude(0.0) {}

    // Parameterized constructor
    GeoCoordinate(double lat, double lon) : latitude(lat), longitude(lon) {}

    // Overload equality operator for unordered_map
    bool operator==(const GeoCoordinate& other) const {
        return latitude == other.latitude && longitude == other.longitude;
    }
};

// Hash function for GeoCoordinate (required for unordered_map)
struct GeoCoordinateHash {
    std::size_t operator()(const GeoCoordinate& coord) const {
        return std::hash<double>()(coord.latitude) ^ std::hash<double>()(coord.longitude);
    }
};

// Function to calculate the Haversine distance between two geo-coordinates (in kilometers)
double haversineDistance(const GeoCoordinate& a, const GeoCoordinate& b) {
    const double R = 6371.0; // Earth radius in kilometers
    double dLat = (b.latitude - a.latitude) * M_PI / 180.0;
    double dLon = (b.longitude - a.longitude) * M_PI / 180.0;
    double lat1 = a.latitude * M_PI / 180.0;
    double lat2 = b.latitude * M_PI / 180.0;

    double x = sin(dLat / 2) * sin(dLat / 2) +
               sin(dLon / 2) * sin(dLon / 2) * cos(lat1) * cos(lat2);
    double y = 2 * atan2(sqrt(x), sqrt(1 - x));
    return R * y;
}

// Define a structure to represent a delivery point with an optional time window
struct Delivery {
    GeoCoordinate location;
    std::pair<int, int> time_window; // Time window in hours (e.g., 15-17 for 3 PM - 5 PM)
    bool has_time_window; // Flag to indicate if the delivery has a time window

    Delivery(GeoCoordinate loc, std::pair<int, int> window, bool has_window)
        : location(loc), time_window(window), has_time_window(has_window) {}
};

// Define a structure to represent a vehicle
struct Vehicle {
    int id;
    GeoCoordinate current_location;
    std::vector<GeoCoordinate> route;
    double total_distance;
    std::vector<std::pair<int, int>> schedule;
    int current_time; // Current time in hours (e.g., 14 for 2 PM)

    Vehicle(int id, GeoCoordinate depot) : id(id), current_location(depot), total_distance(0), current_time(9) {} // Start at 9 AM

    void addToRoute(const GeoCoordinate& next_location, double distance, int travel_time) {
        route.push_back(next_location);
        total_distance += distance;
        current_location = next_location;
        current_time += travel_time; // Update current time based on travel time
    }

    void addToSchedule(std::pair<int, int> time_window) {
        schedule.push_back(time_window);
    }
};

// Function to calculate travel time based on distance and speed
int calculateTravelTime(double distance, double speed = 50.0) {
    // Speed is in km/h, distance is in km
    return static_cast<int>((distance / speed) * 60); // Convert hours to minutes
}

// Function to optimize delivery routes with mixed time-windowed and non-time-windowed deliveries
std::vector<Vehicle> optimizeDeliveryRoutes(const GeoCoordinate& depot,
                                            const std::vector<Delivery>& deliveries,
                                            int num_vehicles) {
    std::vector<Vehicle> vehicles;
    for (int i = 0; i < num_vehicles; ++i) {
        vehicles.push_back(Vehicle(i + 1, depot));
    }

    // Separate deliveries into time-windowed and non-time-windowed
    std::vector<Delivery> time_windowed_deliveries;
    std::vector<Delivery> non_time_windowed_deliveries;

    for (const auto& delivery : deliveries) {
        if (delivery.has_time_window) {
            time_windowed_deliveries.push_back(delivery);
        } else {
            non_time_windowed_deliveries.push_back(delivery);
        }
    }

    // Assign time-windowed deliveries first
    for (auto& vehicle : vehicles) {
        for (auto it = time_windowed_deliveries.begin(); it != time_windowed_deliveries.end();) {
            double distance = haversineDistance(vehicle.current_location, it->location);
            int travel_time = calculateTravelTime(distance);
            int arrival_time = vehicle.current_time + travel_time;

            // Check if the delivery can be made within the time window
            if (arrival_time >= it->time_window.first && arrival_time <= it->time_window.second) {
                vehicle.addToRoute(it->location, distance, travel_time);
                vehicle.addToSchedule(it->time_window);
                it = time_windowed_deliveries.erase(it); // Remove assigned delivery
            } else {
                ++it;
            }
        }
    }

    // Assign non-time-windowed deliveries (optimize for minimal distance)
    while (!non_time_windowed_deliveries.empty()) {
        for (auto& vehicle : vehicles) {
            if (non_time_windowed_deliveries.empty()) break;

            // Find the nearest delivery from the current location
            double min_distance = std::numeric_limits<double>::infinity();
            auto nearest_it = non_time_windowed_deliveries.begin();
            Delivery nearest_delivery = *nearest_it;

            for (auto it = non_time_windowed_deliveries.begin(); it != non_time_windowed_deliveries.end(); ++it) {
                double distance = haversineDistance(vehicle.current_location, it->location);
                if (distance < min_distance) {
                    min_distance = distance;
                    nearest_delivery = *it;
                    nearest_it = it;
                }
            }

            // Calculate the travel time to the nearest delivery
            double distance = haversineDistance(vehicle.current_location, nearest_delivery.location);
            int travel_time = calculateTravelTime(distance);

            // Add the delivery to the vehicle's route
            vehicle.addToRoute(nearest_delivery.location, distance, travel_time);

            // Remove the delivered location
            non_time_windowed_deliveries.erase(nearest_it);
        }
    }

    return vehicles;
}

int main() {
    // Example usage
    GeoCoordinate depot(26.466471045524983, 73.11222367206733); // Depot location
    std::vector<Delivery> deliveries = {
        {{26.47523876708196, 73.11710999950559}, {15, 17}, true}, // Delivery 1 with time window 3 PM - 5 PM
        {{26.475575331906825, 73.12028960504121}, {0, 0}, false}, // Delivery 2 without time window
        {{26.478363194734854, 73.11141385027695}, {0, 0}, false}, // Delivery 3 without time window
        {{26.409415827510088, 73.05786881559627}, {0, 0}, false}, // Delivery 4 without time window
        {{26.474657296139867, 73.11134106607929}, {0, 0}, false}  // Delivery 5 without time window
    };

    int num_vehicles = 2;
    std::vector<Vehicle> vehicles = optimizeDeliveryRoutes(depot, deliveries, num_vehicles);

    // Print the optimized routes and schedules for each vehicle
    for (const auto& vehicle : vehicles) {
        std::cout << "Vehicle " << vehicle.id << " Route:\n";
        for (const auto& coord : vehicle.route) {
            std::cout << "(" << coord.latitude << ", " << coord.longitude << ")\n";
        }
        std::cout << "Total Distance: " << vehicle.total_distance << " km\n";
        std::cout << "Schedule:\n";
        for (const auto& window : vehicle.schedule) {
            std::cout << window.first << ":00 - " << window.second << ":00\n";
        }
        std::cout << "Current Time: " << vehicle.current_time << ":00\n";
        std::cout << "\n";
    }

    return 0;
}